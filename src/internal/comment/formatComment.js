import { compareTwoSnapshots } from "../compareTwoSnapshots.js"
import { isAdded, isModified, isDeleted } from "./helper.js"
import { renderSizeImpactTable } from "./renderSizeImpact.js"
import { renderCacheImpactDescription, renderCacheImpactTable } from "./renderCacheImpact.js"
import { computeMaxLinePerTable } from "./computeMaxLinePerTable.js"

export const HEADER = `<!-- Generated by @jsenv/file-size-impact -->`

//           <tr>
// <td colspan="3" align="center">... 10 more ...</td>

export const formatComment = ({
  sizeImpact,
  cacheImpact,
  trackingConfig,
  transformations,
  formatSize,
  maxLinesPerTable,
  pullRequestBase,
  pullRequestHead,
  baseSnapshot,
  afterMergeSnapshot,
}) => {
  const warnings = []
  const snapshotComparison = compareTwoSnapshots(baseSnapshot, afterMergeSnapshot)
  const groups = Object.keys(snapshotComparison)
  const groupCount = groups.length

  if (groupCount === 0) {
    warnings.push(
      `**Warning:** Nothing is tracked. It happens when tracking config is an empty object.`,
    )
  }

  // call formatSize only on numbers 'error' must be returned untouched
  const formatSizeOriginal = formatSize
  formatSize = (value, ...rest) => {
    if (typeof value === "number") return formatSizeOriginal(value, ...rest)
    return value
  }

  const transformationsCount = Object.keys(transformations).length
  const warning = renderWarnings(warnings)
  const maxLinePerTable = computeMaxLinePerTable({
    warning,
    groupCount,
    transformationsCount,
    cacheImpact,
  })

  const parts = [
    warning,
    renderCommentBody({
      sizeImpact,
      cacheImpact,
      trackingConfig,
      transformations,
      formatSize,
      maxLinePerTable,
      pullRequestBase,
      pullRequestHead,
      snapshotComparison,
    }),
  ].filter((string) => string.length > 0)

  return `${HEADER}
<h4 id="file-size-impact">File size impact</h4>

${parts.join(`

`)}`
}

const renderWarnings = (warnings) => {
  if (warnings.length === 0) {
    return ""
  }

  return `---

${warnings.join(`

`)}

---`
}

const renderCommentBody = ({
  trackingConfig,
  transformations,
  formatSize,
  sizeImpact,
  cacheImpact,
  pullRequestBase,
  pullRequestHead,
  snapshotComparison,
  maxLinesPerTable,
}) => {
  const groupMessages = Object.keys(snapshotComparison).map((groupName) => {
    const groupComparison = snapshotComparison[groupName]
    const emptyGroup = Object.keys(groupComparison).length === 0
    if (emptyGroup) {
      return renderEmptyGroup(groupName, trackingConfig[groupName])
    }

    const sizeImpacts = {}
    const sizeImpactExcluded = {}
    const cacheImpacts = {}
    const cacheImpactsExcluded = {}

    const addImpact = (fileRelativeUrl, { event, sizeImpactMap, base, afterMerge }) => {
      const meta = event === "deleted" ? base.meta : afterMerge.meta
      const impact = { event, sizeImpactMap, base, afterMerge }
      const hookParameters = { fileRelativeUrl, ...impact }

      if (sizeImpact && hasSizeImpact(sizeImpactMap)) {
        if (metaEnables(meta, "showSizeImpact", hookParameters)) {
          sizeImpacts[fileRelativeUrl] = impact
        } else {
          sizeImpactExcluded[fileRelativeUrl] = impact
        }
      }

      if (cacheImpact && (event === "modified" || event === "added")) {
        if (metaEnables(meta, "showCacheImpact", hookParameters)) {
          cacheImpacts[fileRelativeUrl] = impact
        } else {
          cacheImpactsExcluded[fileRelativeUrl] = impact
        }
      }
    }

    Object.keys(groupComparison).forEach((fileRelativeUrl) => {
      const { base, afterMerge } = groupComparison[fileRelativeUrl]

      if (isAdded({ base, afterMerge })) {
        const event = "added"
        const sizeImpactMap = {}
        const sizeMapAfterMerge = afterMerge.sizeMap
        Object.keys(sizeMapAfterMerge).forEach((sizeName) => {
          sizeImpactMap[sizeName] = sizeMapAfterMerge[sizeName]
        })
        addImpact(fileRelativeUrl, {
          event,
          sizeImpactMap,
          base,
          afterMerge,
        })
        return
      }

      if (isDeleted({ base, afterMerge })) {
        const event = "deleted"
        const sizeImpactMap = {}
        const sizeMapOnBase = base.sizeMap
        Object.keys(sizeMapOnBase).forEach((sizeName) => {
          sizeImpactMap[sizeName] = -sizeMapOnBase[sizeName]
        })
        addImpact(fileRelativeUrl, {
          event,
          sizeImpactMap,
          base,
          afterMerge,
        })
        return
      }

      if (isModified({ base, afterMerge })) {
        const event = "modified"
        const sizeImpactMap = {}
        const sizeMapOnBase = base.sizeMap
        const sizeMapAfterMerge = afterMerge.sizeMap
        Object.keys(sizeMapAfterMerge).forEach((sizeName) => {
          sizeImpactMap[sizeName] = sizeMapAfterMerge[sizeName] - sizeMapOnBase[sizeName]
        })
        addImpact(fileRelativeUrl, {
          event,
          sizeImpactMap,
          base,
          afterMerge,
        })
      }
    })

    const allEmpty = [sizeImpacts, sizeImpactExcluded, cacheImpacts, cacheImpactsExcluded].every(
      (object) => Object.keys(object).length === 0,
    )
    if (allEmpty) {
      return `<details>
  <summary>${groupName} (0)</summary>
  <p>No impact on files in ${groupName} group.</p>
</details>`
    }

    const sizeImpactCount = Object.keys(sizeImpacts).length
    const cacheImpactCount = Object.keys(cacheImpacts).length
    const sizeImpactExcludedCount = Object.keys(sizeImpactExcluded).length
    const cacheImpactExcludedCount = Object.keys(cacheImpactsExcluded).length
    const impactCount = sizeImpactCount + cacheImpactCount
    const elements = [
      formulateMergeDescription({
        pullRequestBase,
        pullRequestHead,
        sizeImpacts,
        cacheImpacts,
        groupName,
      }),
      ...(sizeImpactCount
        ? [
            renderSizeImpactTable(sizeImpacts, {
              transformations,
              formatSize,
              maxLinesPerTable,
            }),
          ]
        : []),
      ...(cacheImpactCount
        ? [
            renderCacheImpactDescription(cacheImpacts),
            renderCacheImpactTable(cacheImpacts, { transformations, formatSize, maxLinesPerTable }),
          ]
        : []),
      ...(sizeImpactExcludedCount > 0 || cacheImpactExcludedCount > 0
        ? [
            formulateHiddenImpacts({
              sizeImpactExcluded,
              cacheImpactsExcluded,
              transformations,
              formatSize,
              maxLinesPerTable,
            }),
          ]
        : []),
    ]

    return `<details>
  <summary>${groupName} (${impactCount})</summary>
  ${elements.join(`
  `)}
</details>`
  })

  return groupMessages.join(`

`)
}

const hasSizeImpact = (sizeImpactMap) => {
  return Object.keys(sizeImpactMap).some((sizeName) => sizeImpactMap[sizeName] !== 0)
}

const formulateMergeDescription = ({
  pullRequestBase,
  pullRequestHead,
  sizeImpacts,
  cacheImpacts,
  groupName,
}) => {
  const globalImpact = formulateGlobalImpact({ sizeImpacts, cacheImpacts })
  return `<p>Merging ${pullRequestHead} into ${pullRequestBase} will ${globalImpact} in ${groupName} group.</p>`
}

const formulateGlobalImpact = ({ sizeImpacts, cacheImpacts }) => {
  const sizeImpactCount = Object.keys(sizeImpacts).length
  const cacheImpactCount = Object.keys(cacheImpacts).length

  if (sizeImpactCount === 0 && cacheImpactCount === 0) {
    return `not impact files`
  }

  if (sizeImpactCount === 0) {
    return `invalidate ${formulateFileQuantity(cacheImpactCount)} cache`
  }

  if (cacheImpactCount === 0) {
    return `impact ${formulateFileQuantity(sizeImpactCount)} size`
  }

  return `impact ${formulateFileQuantity(
    sizeImpactCount,
  )} size and invalidate ${formulateFileQuantity(cacheImpactCount)} cache`
}

const formulateFileQuantity = (count) => {
  return count === 1 ? `1 file` : `${count} files`
}

const formulateHiddenImpacts = ({
  sizeImpactExcluded,
  cacheImpactsExcluded,
  transformations,
  formatSize,
}) => {
  const sizeImpactExcludedCount = Object.keys(sizeImpactExcluded).length
  const cacheImpactExcludedCount = Object.keys(cacheImpactsExcluded).length
  const impactExcludedCount = sizeImpactExcludedCount + cacheImpactExcludedCount
  const elements = [
    ...(sizeImpactExcludedCount
      ? [renderFileSizeImpactTable(sizeImpactExcluded, { transformations, formatSize })]
      : []),
    ...(cacheImpactExcludedCount
      ? [renderCacheImpactTable(cacheImpactsExcluded, { transformations, formatSize })]
      : []),
  ]

  return `<details>
  <summary>Hidden impact (${impactExcludedCount})</summary>
  <p>${formulateHiddenImpactMessage({ sizeImpactExcludedCount, cacheImpactExcludedCount })}.</p>
  ${elements.join(`
  `)}
  </details>`
}

const formulateHiddenImpactMessage = ({ sizeImpactExcludedCount, cacheImpactExcludedCount }) => {
  if (sizeImpactExcludedCount === 0) {
    if (cacheImpactExcludedCount === 1) {
      return `1 file cache invalidation has been excluded`
    }
    return `${sizeImpactExcludedCount} files cache invalidation have been excluded`
  }

  if (cacheImpactExcludedCount === 0) {
    if (sizeImpactExcludedCount === 1) {
      return `1 file size impact has been excluded`
    }
    return `${sizeImpactExcludedCount} files size impact have been excluded`
  }

  return `${formulateFileQuantity(sizeImpactExcludedCount)} size and ${formulateFileQuantity(
    cacheImpactExcludedCount,
  )} cache invalidation have been exluded`
}

const renderEmptyGroup = (groupName, groupConfig) => {
  return `<details>
  <summary>${groupName} (0)</summary>
  <p>No file in ${groupName} group (see config below).</p>

\`\`\`json
${JSON.stringify(groupConfig, null, "  ")}
\`\`\`

</details>`
}

const metaEnables = (
  meta,
  metaProperty,
  { fileRelativeUrl, event, sizeImpactMap, base, afterMerge },
) => {
  if (typeof meta === "boolean") {
    return meta
  }

  if (typeof meta === "object") {
    const metaPropertyValue = meta[metaProperty]
    if (typeof metaPropertyValue === "boolean") {
      return metaPropertyValue
    }

    if (typeof metaPropertyValue === "function") {
      return metaPropertyValue({
        fileRelativeUrl,
        event,
        sizeImpactMap,
        sizeMapOnBase: base.sizeMap,
        sizeMapAfterMerge: afterMerge.sizeMap,
      })
    }

    console.warn(`${metaProperty} must be a boolean or a function, received ${metaPropertyValue}`)
    return true
  }

  console.warn(`meta must be a boolean or a function, received ${meta}`)
  return Boolean(meta)
}
