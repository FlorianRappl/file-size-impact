import { compareTwoSnapshots } from "../compareTwoSnapshots.js"
import { isAdded, isModified, isDeleted } from "./helper.js"
import { renderSizeImpactTable } from "./renderSizeImpact.js"

export const HEADER = `<!-- Generated by @jsenv/file-size-impact -->`

const GITHUB_MAX_COMMENT_LENGTH = 65536
// let's be large and keep 5000 over 65536 (GITHUB_MAX_COMMENT_LENGTH)
// for header, warnings and footer (footer is added by reportFileSizeImpact)
// so if body length exceed 60000 (60ko) we truncate it, otherwise
// github would not let us post the comment
const COMMENT_BODY_MAX_LENGTH = GITHUB_MAX_COMMENT_LENGTH - 5000

export const formatComment = ({
  cacheImpact,
  trackingConfig,
  transformations,
  formatSize,
  maxLinesPerTable,
  pullRequestBase,
  pullRequestHead,
  baseSnapshot,
  afterMergeSnapshot,
}) => {
  const warnings = []
  const snapshotComparison = compareTwoSnapshots(baseSnapshot, afterMergeSnapshot)
  const groups = Object.keys(snapshotComparison)
  const groupCount = groups.length

  if (groupCount === 0) {
    warnings.push(
      `**Warning:** Nothing is tracked. It happens when tracking config is an empty object.`,
    )
  }

  // call formatSize only on numbers 'error' must be returned untouched
  const formatSizeOriginal = formatSize
  formatSize = (value, ...rest) => {
    if (typeof value === "number") return formatSizeOriginal(value, ...rest)
    return value
  }

  let body = renderCommentBody({
    cacheImpact,
    trackingConfig,
    transformations,
    formatSize,
    maxLinesPerTable,
    pullRequestBase,
    pullRequestHead,
    snapshotComparison,
  })

  const bodyLength = Buffer.byteLength(body)
  if (bodyLength > COMMENT_BODY_MAX_LENGTH) {
    body = `${body.slice(0, COMMENT_BODY_MAX_LENGTH)}â€¦`
    warnings.push(
      `**Warning:** The comment body was truncated to fit GitHub limit on comment length.
Your trackingConfig is maybe tracking too much files ?
As the body is truncated the message might be hard to read.
For the record the full comment length was ${formatSize(bodyLength, { unit: true })}.`,
    )
  }

  const head = `${HEADER}
<h4 id="file-size-impact">File size impact</h4>`
  const warning = renderWarnings(warnings)

  const parts = [warning, body].filter((string) => string.length > 0)

  return `${head}

${parts.join(`

`)}`
}

const renderWarnings = (warnings) => {
  if (warnings.length === 0) {
    return ""
  }

  return `---

${warnings.join(`

`)}

---`
}

const renderCommentBody = ({
  trackingConfig,
  transformations,
  formatSize,
  cacheImpact,
  pullRequestBase,
  pullRequestHead,
  snapshotComparison,
  maxLinesPerTable,
}) => {
  const fileImpacts = {}
  const markFileImpact = (relativeUrl, groupName) => {
    if (!fileImpacts.hasOwnProperty(relativeUrl)) {
      fileImpacts[relativeUrl] = groupName
    }
  }

  const groupMessages = Object.keys(snapshotComparison).map((groupName) => {
    const groupComparison = snapshotComparison[groupName]
    const emptyGroup = Object.keys(groupComparison).length === 0
    if (emptyGroup) {
      return renderEmptyGroup(groupName, trackingConfig[groupName])
    }

    const fileByFileImpact = {}
    const fileByFileImpactHidden = {}

    const addImpact = (fileRelativeUrl, { event, sizeImpactMap, base, afterMerge }) => {
      const meta = event === "deleted" ? base.meta : afterMerge.meta
      const impact = {
        event,
        sizeImpactMap,
        base,
        afterMerge,
        ...(cacheImpact
          ? { participatesToCacheImpact: event === "modified" || event === "added" }
          : {}),
      }

      const hookParameters = { fileRelativeUrl, ...impact }

      if (!cacheImpact && !hasSizeImpact(sizeImpactMap)) {
        return
      }

      if (metaEnables(meta, "showSizeImpact", hookParameters)) {
        markFileImpact(fileRelativeUrl, groupName)
        fileByFileImpact[fileRelativeUrl] = impact
      } else {
        fileByFileImpactHidden[fileRelativeUrl] = impact
      }
    }

    Object.keys(groupComparison).forEach((fileRelativeUrl) => {
      const { base, afterMerge } = groupComparison[fileRelativeUrl]

      if (isAdded({ base, afterMerge })) {
        const event = "added"
        const sizeImpactMap = {}
        const sizeMapAfterMerge = afterMerge.sizeMap
        Object.keys(sizeMapAfterMerge).forEach((sizeName) => {
          sizeImpactMap[sizeName] = sizeMapAfterMerge[sizeName]
        })
        addImpact(fileRelativeUrl, {
          event,
          sizeImpactMap,
          base,
          afterMerge,
        })
        return
      }

      if (isDeleted({ base, afterMerge })) {
        const event = "deleted"
        const sizeImpactMap = {}
        const sizeMapOnBase = base.sizeMap
        Object.keys(sizeMapOnBase).forEach((sizeName) => {
          sizeImpactMap[sizeName] = -sizeMapOnBase[sizeName]
        })
        addImpact(fileRelativeUrl, {
          event,
          sizeImpactMap,
          base,
          afterMerge,
        })
        return
      }

      if (isModified({ base, afterMerge })) {
        const event = "modified"
        const sizeImpactMap = {}
        const sizeMapOnBase = base.sizeMap
        const sizeMapAfterMerge = afterMerge.sizeMap
        Object.keys(sizeMapAfterMerge).forEach((sizeName) => {
          sizeImpactMap[sizeName] = sizeMapAfterMerge[sizeName] - sizeMapOnBase[sizeName]
        })
        addImpact(fileRelativeUrl, {
          event,
          sizeImpactMap,
          base,
          afterMerge,
        })
      }
    })

    const impactCount = Object.keys(fileByFileImpact).length
    const impactHiddenCount = Object.keys(fileByFileImpactHidden).length
    if (impactCount === 0 && impactHiddenCount === 0) {
      return `<details>
  <summary>${groupName} (0)</summary>
  <p>No impact on files in ${groupName} group.</p>
</details>`
    }

    const elements = [
      ...(impactCount > 0
        ? [
            renderSizeImpactTable(fileByFileImpact, {
              cacheImpact,
              transformations,
              formatSize,
              maxLinesPerTable,
            }),
          ]
        : []),
      ...(impactHiddenCount > 0
        ? [
            formulateHiddenImpacts(fileByFileImpactHidden, {
              cacheImpact,
              transformations,
              formatSize,
              maxLinesPerTable,
            }),
          ]
        : []),
      ...(cacheImpact && (impactCount > 0 || impactHiddenCount > 0)
        ? [formulateCacheImpactLegend()]
        : []),
    ]

    return `<details>
  <summary>${groupName} (${impactCount})</summary>
  ${elements.join(`
  `)}
</details>`
  })

  const mergeImpact = formulateMergeImpact({ pullRequestHead, pullRequestBase, fileImpacts })
  if (groupMessages.length === 0) {
    return mergeImpact
  }

  return `${mergeImpact}
${groupMessages.join(`

`)}`
}

const formulateMergeImpact = ({ pullRequestBase, pullRequestHead, fileImpacts }) => {
  const overallImpact = formulateOverallImpact(fileImpacts)
  return `<p>Merging ${pullRequestHead} into ${pullRequestBase} will ${overallImpact}.</p>`
}

const formulateOverallImpact = (fileImpacts) => {
  let impactedFileCount = 0
  let impactedGroupCount = 0
  const impactedGroups = []
  Object.keys(fileImpacts).forEach((relativeUrl) => {
    impactedFileCount++
    const groupName = fileImpacts[relativeUrl]
    if (!impactedGroups.includes(groupName)) {
      impactedGroups.push(groupName)
      impactedGroupCount++
    }
  })

  if (impactedFileCount === 0) {
    return `not impact files in any group`
  }
  return `impact ${formulateFileQuantity(impactedFileCount)} in ${formulateGroupQuantity(
    impactedGroupCount,
  )}`
}

const formulateFileQuantity = (count) => {
  return count === 1 ? `1 file` : `${count} files`
}

const formulateGroupQuantity = (count) => {
  return count === 1 ? `1 group` : `${count} groups`
}

const hasSizeImpact = (sizeImpactMap) => {
  return Object.keys(sizeImpactMap).some((sizeName) => sizeImpactMap[sizeName] !== 0)
}

const renderEmptyGroup = (groupName, groupConfig) => {
  return `<details>
  <summary>${groupName} (0)</summary>
  <p>No file in ${groupName} group (see config below).</p>

\`\`\`json
${JSON.stringify(groupConfig, null, "  ")}
\`\`\`

</details>`
}

const metaEnables = (
  meta,
  metaProperty,
  { fileRelativeUrl, event, sizeImpactMap, base, afterMerge },
) => {
  if (typeof meta === "boolean") {
    return meta
  }

  if (typeof meta === "object") {
    const metaPropertyValue = meta[metaProperty]
    if (typeof metaPropertyValue === "boolean") {
      return metaPropertyValue
    }

    if (typeof metaPropertyValue === "function") {
      return metaPropertyValue({
        fileRelativeUrl,
        event,
        sizeImpactMap,
        sizeMapOnBase: base.sizeMap,
        sizeMapAfterMerge: afterMerge.sizeMap,
      })
    }

    console.warn(`${metaProperty} must be a boolean or a function, received ${metaPropertyValue}`)
    return true
  }

  console.warn(`meta must be a boolean or a function, received ${meta}`)
  return Boolean(meta)
}

const formulateHiddenImpacts = (
  fileByFileImpactHidden,
  { cacheImpact, transformations, formatSize },
) => {
  const impactHiddenCount = Object.keys(fileByFileImpactHidden).length
  const elements = [
    ...(impactHiddenCount > 0
      ? [
          renderSizeImpactTable(fileByFileImpactHidden, {
            isHiddenImpactTable: true,
            cacheImpact,
            transformations,
            formatSize,
          }),
        ]
      : []),
  ]

  return `<details>
  <summary>Hidden (${impactHiddenCount})</summary>
  ${elements.join(`
  `)}
  </details>`
}

const formulateCacheImpactLegend = () => {
  return `<sub>
    <sup>*</sup> Each file marked with an asterisk participates into the total cache impact. These
    files must be downloaded by a returning user either because it's a new file or because it has
    been modified.
  </sub>`
}
