import { compareTwoSnapshots } from "../compareTwoSnapshots.js"

import { renderFileSizeImpact } from "./renderFileSizeImpact.js"
import { renderCacheImpact } from "./renderCacheImpact.js"
import { renderDetailedSizeImpact } from "./renderDetailedSizeImpact.js"

export const HEADER = `<!-- Generated by @jsenv/file-size-impact -->`

export const formatComment = ({
  pullRequestBase,
  pullRequestHead,
  trackingConfig,
  transformations,
  baseSnapshot,
  afterMergeSnapshot,
  formatSize,
  cacheImpact,
  detailedSizeImpact,
}) => {
  const warnings = []
  const snapshotComparison = compareTwoSnapshots(baseSnapshot, afterMergeSnapshot)
  const groups = Object.keys(snapshotComparison)

  if (groups.length === 0) {
    warnings.push(
      `**Warning:** Nothing is tracked. It happens when tracking config is an empty object.`,
    )
  }

  // call formatSize only on numbers 'error' must be returned untouched
  const formatSizeOriginal = formatSize
  formatSize = (value, ...rest) => {
    if (typeof value === "number") return formatSizeOriginal(value, ...rest)
    return value
  }

  const bodyParts = [
    renderWarnings(warnings),
    renderFileSizeImpact({
      trackingConfig,
      transformations,
      snapshotComparison,
      formatSize,
    }),
    ...(cacheImpact
      ? [
          renderCacheImpact({
            trackingConfig,
            transformations,
            snapshotComparison,
            formatSize,
          }),
        ]
      : []),
    ...(detailedSizeImpact
      ? [
          renderDetailedSizeImpact({
            pullRequestBase,
            pullRequestHead,
            snapshotComparison,
            trackingConfig,
            transformations,
            formatSize,
          }),
        ]
      : []),
  ].filter((string) => string.length > 0)

  return `${HEADER}
<h4 id="file-size-impact">File size impact</h4>

${bodyParts.join(`

`)}`
}

const renderWarnings = (warnings) => {
  if (warnings.length === 0) {
    return ""
  }

  return `---

${warnings.join(`

`)}

---`
}
