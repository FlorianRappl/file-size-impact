const enDecimalFormatter = new Intl.NumberFormat("en", { style: "decimal" })

const formatSizeFallback = (sizeNumber, { diff = false, unit = false } = {}) => {
  let sizeString = enDecimalFormatter.format(sizeNumber > 0 ? Math.abs(sizeNumber) : sizeNumber)

  if (diff) {
    if (sizeNumber > 0) {
      sizeString = `+${sizeString}`
    } else if (sizeNumber < 0) {
      sizeString = `-${sizeString}`
    }
  }

  if (unit) {
    if (sizeNumber === 0) {
    } else if (sizeNumber === 1) {
      sizeString = `${sizeString} byte`
    } else if (sizeNumber > 1) {
      sizeString = `${sizeString} bytes`
    }
  }

  return sizeString
}

export const generatePullRequestCommentString = ({
  pullRequestBase,
  pullRequestHead,
  snapshotComparison,
  formatSize = formatSizeFallback,
  // this is to inform someone wondering where this message comes from
  // do not confuse this with advertising
  // if you don't like it, you can pass this option to false
  generatedByLink = true,
}) => {
  const directoryMessages = Object.keys(snapshotComparison).map((directoryRelativeUrl) => {
    const directoryComparison = snapshotComparison[directoryRelativeUrl]
    const sizeImpactMap = {}
    let sizeImpact = 0
    let hasImpact = false
    Object.keys(directoryComparison).forEach((relativeUrl) => {
      const { base, head } = directoryComparison[relativeUrl]

      // added
      if (!base) {
        const headSize = head.size
        if (headSize !== 0) {
          sizeImpactMap[relativeUrl] = {
            why: "added",
            baseSize: 0,
            headSize,
            diffSize: headSize,
          }
          hasImpact = true
          sizeImpact += headSize
        }
      }
      // removed
      else if (base && !head) {
        const baseSize = base.size
        if (baseSize !== 0) {
          sizeImpactMap[relativeUrl] = {
            why: "removed",
            baseSize,
            headSize: 0,
            diffSize: -baseSize,
          }
          hasImpact = true
          sizeImpact -= baseSize
        }
      }
      // changed
      else if (base && head) {
        const baseSize = base.size
        const headSize = head.size
        const diffSize = headSize - baseSize
        if (base.hash !== head.hash) {
          sizeImpactMap[relativeUrl] = {
            why: "changed",
            baseSize,
            headSize,
            diffSize,
          }
          hasImpact = true
          sizeImpact += diffSize
        }
      }
    })

    const sizeImpactText = generateSizeImpactText({
      directoryRelativeUrl,
      formatSize,
      sizeImpact,
    })

    return `<details>
  <summary>${sizeImpactText}</summary>
  <br />${generateSizeImpactDetails({
    pullRequestBase,
    pullRequestHead,
    formatSize,
    sizeImpactMap,
    hasImpact,
    sizeImpact,
  })}
</details>`
  })

  if (directoryMessages.length === 0) return null

  return `${directoryMessages.join(`

`)}${
    generatedByLink
      ? `

<sub>Generated by [github pull request filesize impact](https://github.com/jsenv/jsenv-github-pull-request-filesize-impact)</sub>`
      : ""
  }`
}

const generateSizeImpactDetails = ({
  pullRequestBase,
  pullRequestHead,
  formatSize,
  sizeImpactMap,
  hasImpact,
  sizeImpact,
}) => {
  if (hasImpact) {
    return `${generateSizeImpactTable({
      pullRequestBase,
      pullRequestHead,
      formatSize,
      sizeImpactMap,
    })}

  <blockquote>
    <strong>Overall size impact:</strong> ${formatSize(sizeImpact, {
      diff: true,
      unit: true,
    })}.<br />
    <strong>Cache impact:</strong> ${formatCacheImpact(sizeImpactMap, formatSize)}
  </blockquote>`
  }
  return `
  <blockquote>changes don't affect the overall size or cache.</blockquote>`
}

const generateSizeImpactTable = ({
  pullRequestBase,
  pullRequestHead,
  formatSize,
  sizeImpactMap,
}) => `
  <table>
    <thead>
      <tr>
        <th nowrap>file</th>
        <th nowrap>event</th>
        <th nowrap>diff</th>
        <th nowrap><code>${pullRequestBase}</code></th>
        <th nowrap><code>${pullRequestHead}</code></th>
      </tr>
    </thead>
    <tbody>
      ${renderTableBody(sizeImpactMap, formatSize)}
    </tbody>
  </table>`

const renderTableBody = (sizeImpactMap, formatSize) => {
  const lines = Object.keys(sizeImpactMap).map((relativePath) => {
    const sizeImpact = sizeImpactMap[relativePath]

    return `
        <td nowrap>${relativePath}</td>
        <td nowrap>${generateEventCellText(sizeImpact.why)}</td>
        <td nowrap>${generateImpactCellText(sizeImpact, formatSize)}</td>
        <td nowrap>${generateBaseCellText(sizeImpact, formatSize)}</td>
        <td nowrap>${generateHeadCellText(sizeImpact, formatSize)}</td>`
  })

  if (lines.length === 0) return ""

  return `<tr>${lines.join(`
      </tr>
      <tr>`)}
      </tr>`
}

const generateEventCellText = (why) => {
  if (why === "added") {
    return "file created"
  }
  if (why === "removed") {
    return "file deleted"
  }
  return "changed"
}

const generateBaseCellText = ({ baseSize, why }, formatSize) => {
  if (why === "added") {
    return "---"
  }
  return formatSize(baseSize)
}

const generateHeadCellText = ({ headSize, why }, formatSize) => {
  if (why === "removed") {
    return "---"
  }
  return formatSize(headSize)
}

const generateImpactCellText = ({ diffSize }, formatSize) => {
  return formatSize(diffSize, { diff: true })
}

const generateSizeImpactText = ({ directoryRelativeUrl, formatSize, sizeImpact }) => {
  return `Overall size impact on <code>${directoryRelativeUrl}</code>: ${formatSize(sizeImpact, {
    diff: true,
    unit: true,
  })}.`
}

const formatCacheImpact = (sizeImpactMap, formatSize) => {
  const changedFiles = Object.keys(sizeImpactMap).filter((relativePath) => {
    return sizeImpactMap[relativePath].why === "changed"
  })
  const numberOfChangedFiles = changedFiles.length
  if (numberOfChangedFiles === 0) {
    return "none."
  }
  const numberOfBytes = changedFiles.reduce((number, relativePath) => {
    return number + sizeImpactMap[relativePath].baseSize
  }, 0)
  return `${numberOfChangedFiles} files content changed, invalidating a total of ${formatSize(
    numberOfBytes,
    { unit: true },
  )}.`
}
