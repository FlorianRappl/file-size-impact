const enDecimalFormatter = new Intl.NumberFormat("en", { style: "decimal" })

const formatSizeFallback = (size) => `${enDecimalFormatter.format(size)} bytes`

export const generatePullRequestCommentString = ({
  folderRelativePath,
  pullRequestBase,
  pullRequestHead,
  folderDiff,
  formatSize = formatSizeFallback,
  // this is to inform someone wondering where this message comes from
  // do not confuse this with advertising
  // if you don't like it, you can pass this option to false
  generatedByLink = true,
}) => {
  const sizeImpactMap = {}
  let sizeImpact = 0
  let hasSizeImpact = false
  Object.keys(folderDiff).forEach((relativePath) => {
    const { leftInfo, rightInfo } = folderDiff[relativePath]

    // added
    if (!leftInfo && rightInfo.type === "file") {
      const baseSize = 0
      const headSize = rightInfo.size
      const diffSize = headSize - baseSize
      if (diffSize) {
        sizeImpactMap[relativePath] = {
          why: "removed",
          baseSize,
          headSize,
          diffSize,
        }
        hasSizeImpact = true
        sizeImpact += diffSize
      }
    }
    // removed
    else if (leftInfo && leftInfo.type === "file" && !rightInfo) {
      const baseSize = leftInfo.size
      const headSize = 0
      const diffSize = headSize - baseSize
      if (diffSize) {
        sizeImpactMap[relativePath] = {
          why: "removed",
          baseSize,
          headSize,
          diffSize,
        }
        hasSizeImpact = true
        sizeImpact += diffSize
      }
    }
    // changed
    else if (leftInfo && leftInfo.type === "file" && rightInfo && rightInfo.type === "file") {
      const baseSize = leftInfo.size
      const headSize = rightInfo.size
      const diffSize = headSize - baseSize
      if (diffSize) {
        sizeImpactMap[relativePath] = {
          why: "changed",
          baseSize,
          headSize,
          diffSize,
        }
        hasSizeImpact = true
        sizeImpact += diffSize
      }
    }
  })

  const sizeImpactText = generateSizeImpactText({
    folderRelativePath,
    formatSize,
    sizeImpact,
  })

  return `<details>
  <summary>Merging <code>${pullRequestHead}</code> into <code>${pullRequestBase}</code> would ${sizeImpactText}</summary>
  ${generateSizeImpactDetails({
    pullRequestBase,
    pullRequestHead,
    formatSize,
    sizeImpactMap,
    hasSizeImpact,
  })}

  ${
    generatedByLink
      ? "<sub>Generated by [jsenv continuous size reporting](https://github.com/jsenv/jsenv-continuous-size-reporting)</sub>"
      : ""
  }
</details>`
}

const generateSizeImpactDetails = ({
  pullRequestBase,
  pullRequestHead,
  formatSize,
  sizeImpactMap,
  hasSizeImpact,
}) => {
  if (hasSizeImpact) {
    return generateSizeImpactTable({ pullRequestBase, pullRequestHead, formatSize, sizeImpactMap })
  }
  return "changes are not affecting file sizes."
}

const generateSizeImpactTable = ({
  pullRequestBase,
  pullRequestHead,
  formatSize,
  sizeImpactMap,
}) => `
file | size on \`${pullRequestBase}\` | size on \`${pullRequestHead}\`| effect
---- | ----------- | --------------------- | ----------
${Object.keys(sizeImpactMap).map((relativePath) => {
  const sizeImpact = sizeImpactMap[relativePath]

  return [
    relativePath,
    generateBaseCellText({ formatSize, sizeImpact }),
    generateHeadCellText({ formatSize, sizeImpact }),
    generateImpactCellText({ formatSize, sizeImpact }),
  ].join("|")
}).join(`
`)}`

const generateBaseCellText = ({ formatSize, sizeImpact: { baseSize } }) => {
  return formatSize(baseSize)
}

const generateHeadCellText = ({ formatSize, sizeImpact: { headSize, why } }) => {
  if (why === "added") {
    return `${formatSize(headSize)} (added)`
  }
  if (why === "removed") {
    return `${formatSize(headSize)} (removed)`
  }
  return formatSize(headSize)
}

const generateImpactCellText = ({ formatSize, sizeImpact: { diffSize } }) => {
  if (diffSize > 0) return `+${formatSize(diffSize)}`
  if (diffSize < 0) return `-${formatSize(Math.abs(diffSize))}`
  return "same"
}

const generateSizeImpactText = ({ folderRelativePath, formatSize, sizeImpact }) => {
  if (sizeImpact === 0) {
    return `<b>not impact</b> <code>${folderRelativePath}</code> size.`
  }
  if (sizeImpact < 0) {
    return `<b>decrease</b> <code>${folderRelativePath}</code> size by ${formatSize(
      Math.abs(sizeImpact),
    )}.`
  }
  return `<b>increase</b> <code>${folderRelativePath}</code> size by ${formatSize(sizeImpact)}.`
}
