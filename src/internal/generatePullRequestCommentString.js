const enDecimalFormatter = new Intl.NumberFormat("en", { style: "decimal" })

const formatSizeFallback = (size) => `${enDecimalFormatter.format(size)} bytes`

export const generatePullRequestCommentString = ({
  pullRequestBase,
  pullRequestHead,
  snapshotComparison,
  formatSize = formatSizeFallback,
  // this is to inform someone wondering where this message comes from
  // do not confuse this with advertising
  // if you don't like it, you can pass this option to false
  generatedByLink = true,
}) => {
  const directoryMessages = Object.keys(snapshotComparison).map((directoryRelativeUrl) => {
    const directoryComparison = snapshotComparison[directoryRelativeUrl]
    const sizeImpactMap = {}
    let sizeImpact = 0
    let hasImpact = false
    Object.keys(directoryComparison).forEach((relativeUrl) => {
      const { base, head } = directoryComparison[relativeUrl]

      // added
      if (!base) {
        const headSize = head.size
        if (headSize !== 0) {
          sizeImpactMap[relativeUrl] = {
            why: "added",
            baseSize: 0,
            headSize,
            diffSize: headSize,
          }
          hasImpact = true
          sizeImpact += headSize
        }
      }
      // removed
      else if (base && !head) {
        const baseSize = base.size
        if (baseSize !== 0) {
          sizeImpactMap[relativeUrl] = {
            why: "removed",
            baseSize,
            headSize: 0,
            diffSize: -baseSize,
          }
          hasImpact = true
          sizeImpact -= baseSize
        }
      }
      // changed
      else if (base && head) {
        const baseSize = base.size
        const headSize = head.size
        const diffSize = headSize - baseSize
        if (base.hash !== head.hash) {
          sizeImpactMap[relativeUrl] = {
            why: "changed",
            baseSize,
            headSize,
            diffSize,
          }
          hasImpact = true
          sizeImpact += diffSize
        }
      }
    })

    const sizeImpactText = generateSizeImpactText({
      directoryRelativeUrl,
      formatSize,
      sizeImpact,
    })

    return `<details>
  <summary>Merging <code>${pullRequestHead}</code> into <code>${pullRequestBase}</code> will ${sizeImpactText}</summary>
${generateSizeImpactDetails({
  pullRequestBase,
  pullRequestHead,
  formatSize,
  sizeImpactMap,
  hasImpact,
  sizeImpact,
})}
</details>`
  })

  if (directoryMessages.length === 0) return null

  return `
${directoryMessages.join(`
---
`)}${
    generatedByLink
      ? `

<sub>Generated by [github pull request filesize impact](https://github.com/jsenv/jsenv-github-pull-request-filesize-impact)</sub>`
      : ""
  }`
}

const generateSizeImpactDetails = ({
  pullRequestBase,
  pullRequestHead,
  formatSize,
  sizeImpactMap,
  hasImpact,
  sizeImpact,
}) => {
  if (hasImpact) {
    return `${generateSizeImpactTable({
      pullRequestBase,
      pullRequestHead,
      formatSize,
      sizeImpactMap,
    })}

**Overall size impact:** ${formatSizeImpact(formatSize, sizeImpact)}.<br />
**Cache impact:** ${formatCacheImpact(formatSize, sizeImpactMap)}`
  }
  return `changes don't affect the overall size or cache.`
}

const generateSizeImpactTable = ({
  pullRequestBase,
  pullRequestHead,
  formatSize,
  sizeImpactMap,
}) => `<br />
${renderTableHeaders({ pullRequestBase, pullRequestHead })}
${renderTableBody({ sizeImpactMap, formatSize })}`

const renderTableHeaders = ({ pullRequestBase, pullRequestHead }) => {
  const headerNames = [
    "event",
    "file",
    `size&nbsp;on&nbsp;\`${pullRequestBase}\``,
    `size&nbsp;on&nbsp;\`${pullRequestHead}\``,
    "size&nbsp;impact",
  ]

  return `
${headerNames.join(" | ")}
${headerNames.map(() => `---`).join(" | ")}`
}

const renderTableBody = ({ sizeImpactMap, formatSize }) => {
  return Object.keys(sizeImpactMap).map((relativePath) => {
    const sizeImpact = sizeImpactMap[relativePath]

    return [
      generateEventCellText(sizeImpact.why),
      relativePath,
      generateBaseCellText({ formatSize, sizeImpact }),
      generateHeadCellText({ formatSize, sizeImpact }),
      generateImpactCellText({ formatSize, sizeImpact }),
    ].join(" | ")
  }).join(`
`)
}

const generateEventCellText = (why) => {
  if (why === "added") {
    return "file&nbsp;created"
  }
  if (why === "removed") {
    return "file&nbsp;deleted"
  }
  return "content&nbsp;changed"
}

const generateBaseCellText = ({ formatSize, sizeImpact: { baseSize, why } }) => {
  if (why === "added") {
    return "---"
  }
  return formatSize(baseSize)
}

const generateHeadCellText = ({ formatSize, sizeImpact: { headSize, why } }) => {
  if (why === "removed") {
    return "---"
  }
  return formatSize(headSize)
}

const generateImpactCellText = ({ formatSize, sizeImpact: { diffSize } }) => {
  return formatSizeImpact(formatSize, diffSize)
}

const generateSizeImpactText = ({ directoryRelativeUrl, formatSize, sizeImpact }) => {
  if (sizeImpact === 0) {
    return `<b>not impact</b> <code>${directoryRelativeUrl}</code> overall size.`
  }
  if (sizeImpact < 0) {
    return `<b>decrease</b> <code>${directoryRelativeUrl}</code> overall size by ${formatSize(
      Math.abs(sizeImpact),
    )}.`
  }
  return `<b>increase</b> <code>${directoryRelativeUrl}</code> overall size by ${formatSize(
    sizeImpact,
  )}.`
}

const formatSizeImpact = (formatSize, diffSize) => {
  if (diffSize > 0) return `+${formatSize(diffSize)}`
  if (diffSize < 0) return `-${formatSize(Math.abs(diffSize))}`
  return 0
}

const formatCacheImpact = (formatSize, sizeImpactMap) => {
  const changedFiles = Object.keys(sizeImpactMap).filter((relativePath) => {
    return sizeImpactMap[relativePath].why === "changed"
  })
  const numberOfChangedFiles = changedFiles.length
  if (numberOfChangedFiles === 0) {
    return "none."
  }
  const numberOfBytes = changedFiles.reduce((number, relativePath) => {
    return number + sizeImpactMap[relativePath].baseSize
  }, 0)
  return `${numberOfChangedFiles} files content changed, invalidating a total of ${formatSize(
    numberOfBytes,
  )}.`
}
