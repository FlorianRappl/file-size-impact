import { renderDirectoryImpact } from "./renderDirectoryImpact.js"
import { renderFilesImpact } from "./renderFilesImpact.js"
import { renderCacheImpact } from "./renderCacheImpact.js"

export const generatePullRequestCommentString = ({
  pullRequestBase,
  pullRequestHead,
  warnings,
  snapshotComparison,
  formatSize,
  commentSections,
  generatedByLink,
}) => {
  const directories = Object.keys(snapshotComparison)

  if (directories.length === 0) {
    warnings.push(`The comparison is empty, check your tracking config.`)
  }

  return `<!-- Generated by @jsenv/github-pull-request-filesize-impact -->
${renderWarnings(warnings)}
${renderBody({ snapshotComparison, pullRequestBase, pullRequestHead, commentSections, formatSize })}
${generatedByLink ? renderGeneratedByLink() : ""}`
}

const renderWarnings = (warnings) => {
  if (warnings.length === 0) {
    return ""
  }

  return `:warning **Warnings** :warning
---

${warnings.join(`

`)}

---
`
}

const renderBody = ({
  snapshotComparison,
  pullRequestBase,
  pullRequestHead,
  commentSections,
  formatSize,
}) => {
  const directoryMessages = Object.keys(snapshotComparison).map((directoryRelativeUrl) => {
    const directoryComparison = snapshotComparison[directoryRelativeUrl]

    return `<details>
  <summary>${generateSummary(directoryRelativeUrl)}</summary>
${generateDetails(directoryComparison, {
  directoryRelativeUrl,
  pullRequestBase,
  pullRequestHead,
  commentSections,
  formatSize: (value, ...rest) => {
    // call formatSize only on numbers 'error' must be returned untouched
    if (typeof value === "number") return formatSize(value, ...rest)
    return value
  },
})}
</details>`
  })

  return directoryMessages.join(`

`)
}

const generateSummary = (directoryRelativeUrl) => directoryRelativeUrl

const COMMENT_NAME_TO_RENDER = {
  directoryImpact: renderDirectoryImpact,
  filesImpact: renderFilesImpact,
  cacheImpact: renderCacheImpact,
}

const generateDetails = (
  directoryComparison,
  { directoryRelativeUrl, pullRequestBase, pullRequestHead, commentSections, formatSize },
) => {
  return Object.keys(commentSections)
    .filter((commentSectionName) => commentSections[commentSectionName])
    .map((commentSectionName) => {
      const renderCommentSection = COMMENT_NAME_TO_RENDER[commentSectionName]
      if (!renderCommentSection) {
        console.warn(
          `unknown comment section ${commentSectionName}. Available comment section are ${Object.keys(
            COMMENT_NAME_TO_RENDER,
          )} `,
        )
        return ""
      }
      return renderCommentSection(directoryComparison, {
        directoryRelativeUrl,
        pullRequestBase,
        pullRequestHead,
        formatSize,
      })
    }).join(`
`)
}

const renderGeneratedByLink = () => {
  return `

<sub>
  Generated by <a href="https://github.com/jsenv/jsenv-github-pull-request-filesize-impact">github pull request filesize impact</a>
</sub>`
}
