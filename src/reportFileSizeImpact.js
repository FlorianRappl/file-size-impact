import { Worker } from "node:worker_threads"
import {
  assertAndNormalizeDirectoryUrl,
  fileSystemPathToUrl,
  isFileSystemPath,
  resolveUrl,
  urlToFileSystemPath,
} from "@jsenv/filesystem"
import { commentGitHubPullRequestImpact } from "@jsenv/github-pull-request-impact"

import { formatComment } from "./internal/formatComment.js"
import { jsenvCommentParameters } from "./internal/jsenvCommentParameters.js"

const workerFileUrl = resolveUrl(
  "./internal/worker_generating_file_size_report.js",
  import.meta.url,
)

export const reportFileSizeImpact = async ({
  logLevel,
  commandLogs,
  cancellationToken,
  cancelOnSIGINT,
  projectDirectoryUrl,

  githubToken,
  repositoryOwner,
  repositoryName,
  pullRequestNumber,
  installCommand = "npm install",
  buildCommand = "npm run-script build",
  fileSizeModulePath,

  // We could just to ...jsenvCommentParameters but explicitely passing params
  // helps autocompletion in vscode for dev using the function.
  filesOrdering = jsenvCommentParameters.filesOrdering,
  maxRowsPerTable = jsenvCommentParameters.maxRowsPerTable,
  fileRelativeUrlMaxLength = jsenvCommentParameters.fileRelativeUrlMaxLength,
  formatGroupSummary = jsenvCommentParameters.formatGroupSummary,
  formatHiddenImpactSummary = jsenvCommentParameters.formatHiddenImpactSummary,
  formatFileRelativeUrl = jsenvCommentParameters.formatFileRelativeUrl,
  formatFileCell = jsenvCommentParameters.formatFileCell,
  formatFileSizeImpactCell = jsenvCommentParameters.formatFileSizeImpactCell,
  formatGroupSizeImpactCell = jsenvCommentParameters.formatGroupSizeImpactCell,
  shouldOpenGroupByDefault = jsenvCommentParameters.shouldOpenGroupByDefault,

  catchError,
  runLink,
  commitInGeneratedByInfo,
}) => {
  if (installCommand === null) {
    // a null installCommand means there is no need to install anything
  } else if (typeof installCommand !== "string") {
    throw new TypeError(`installCommand must be a string but received ${installCommand}`)
  }

  if (buildCommand === null) {
    // a null buildCommand means there is no need to build anything
  } else if (typeof buildCommand !== "string") {
    throw new TypeError(`buildCommand must be a string but received ${buildCommand}`)
  }

  if (typeof fileSizeModulePath !== "string") {
    throw new TypeError(`fileSizeModulePath must be a string but received ${fileSizeModulePath}`)
  }
  projectDirectoryUrl = assertAndNormalizeDirectoryUrl(projectDirectoryUrl)
  const fileSizeModuleUrl = isFileSystemPath(fileSizeModulePath)
    ? fileSystemPathToUrl(fileSizeModulePath)
    : resolveUrl(fileSizeModulePath, projectDirectoryUrl)
  const workerFilePath = urlToFileSystemPath(workerFileUrl)

  return commentGitHubPullRequestImpact({
    logLevel,
    commandLogs,
    cancellationToken,
    cancelOnSIGINT,
    projectDirectoryUrl,

    githubToken,
    repositoryOwner,
    repositoryName,
    pullRequestNumber,

    collectInfo: async ({ execCommandInProjectDirectory }) => {
      if (installCommand) await execCommandInProjectDirectory(installCommand)
      if (buildCommand) await execCommandInProjectDirectory(buildCommand)

      const worker = new Worker(workerFilePath)
      const { fileSizeReport } = await new Promise((resolve, reject) => {
        worker.postMessage({ fileSizeModuleUrl })
        worker.on("message", resolve)
        worker.on("error", reject)
      })

      return { version: 1, data: fileSizeReport }
    },
    commentIdentifier: `<!-- Generated by @jsenv/file-size-impact -->`,
    createCommentForComparison: ({
      pullRequestBase,
      pullRequestHead,
      beforeMergeData,
      afterMergeData,
    }) => {
      return formatComment({
        pullRequestBase,
        pullRequestHead,

        beforeMergeFileSizeReport: beforeMergeData,
        afterMergeFileSizeReport: afterMergeData,

        filesOrdering,
        maxRowsPerTable,
        fileRelativeUrlMaxLength,
        formatGroupSummary,
        formatHiddenImpactSummary,
        formatFileRelativeUrl,
        formatFileCell,
        formatFileSizeImpactCell,
        formatGroupSizeImpactCell,
        shouldOpenGroupByDefault,
      })
    },
    generatedByLink: {
      url: "https://github.com/jsenv/file-size-impact",
      text: "@jsenv/file-size-impact",
    },
    runLink,
    commitInGeneratedByInfo,
    catchError,
  })
}
