import { assertAndNormalizeDirectoryUrl } from "@jsenv/util"
import { commentGitHubPullRequestImpact } from "@jsenv/github-pull-request-impact"

import { formatComment } from "./internal/formatComment.js"
import { generateSnapshot } from "./internal/generateSnapshot.js"
import { jsenvCommentParameters } from "./jsenvCommentParameters.js"
import { jsenvTrackingConfig } from "./jsenvTrackingConfig.js"
import { transform as rawTransform } from "./rawTransformation.js"

export const reportFileSizeImpact = async ({
  logLevel,
  commandLogs,
  cancellationToken,
  cancelOnSIGINT,
  projectDirectoryUrl,

  githubToken,
  repositoryOwner,
  repositoryName,
  pullRequestNumber,
  installCommand = "npm install",
  buildCommand = "npm run-script build",

  trackingConfig = jsenvTrackingConfig,
  manifestConfig = {
    "./dist/**/manifest.json": true,
  },
  transformations = { raw: rawTransform },

  // We could just to ...jsenvCommentParameters but explicitely passing params
  // helps autocompletion in vscode for dev using the function.
  filesOrdering = jsenvCommentParameters.filesOrdering,
  maxRowsPerTable = jsenvCommentParameters.maxRowsPerTable,
  fileRelativeUrlMaxLength = jsenvCommentParameters.fileRelativeUrlMaxLength,
  formatGroupSummary = jsenvCommentParameters.formatGroupSummary,
  formatHiddenImpactSummary = jsenvCommentParameters.formatHiddenImpactSummary,
  formatFileRelativeUrl = jsenvCommentParameters.formatFileRelativeUrl,
  formatFileCell = jsenvCommentParameters.formatFileCell,
  formatFileSizeImpactCell = jsenvCommentParameters.formatFileSizeImpactCell,
  formatGroupSizeImpactCell = jsenvCommentParameters.formatGroupSizeImpactCell,
  shouldOpenGroupByDefault = jsenvCommentParameters.shouldOpenGroupByDefault,

  catchError,
  runLink,
}) => {
  projectDirectoryUrl = assertAndNormalizeDirectoryUrl(projectDirectoryUrl)
  if (typeof githubToken !== "string") {
    throw new TypeError(`githubToken must be a string but received ${githubToken}`)
  }
  if (typeof repositoryOwner !== "string") {
    throw new TypeError(`repositoryOwner must be a string but received ${repositoryOwner}`)
  }
  if (typeof repositoryName !== "string") {
    throw new TypeError(`repositoryName must be a string but received ${repositoryName}`)
  }
  pullRequestNumber = String(pullRequestNumber)
  if (typeof pullRequestNumber !== "string") {
    throw new TypeError(`pullRequestNumber must be a string but received ${pullRequestNumber}`)
  }
  if (typeof installCommand !== "string") {
    throw new TypeError(`installCommand must be a string but received ${installCommand}`)
  }

  return commentGitHubPullRequestImpact({
    logLevel,
    commandLogs,
    cancellationToken,
    cancelOnSIGINT,
    projectDirectoryUrl,

    githubToken,
    repositoryOwner,
    repositoryName,
    pullRequestNumber,
    runLink,

    collectInfo: async ({ cancellationToken, execCommandInProjectDirectory }) => {
      await execCommandInProjectDirectory(installCommand)
      await execCommandInProjectDirectory(buildCommand)

      const snapshot = await generateSnapshot({
        cancellationToken,
        logLevel,
        projectDirectoryUrl,
        trackingConfig,
        manifestConfig,
        transformations,
      })

      return { version: 1, data: snapshot }
    },
    commentIdentifier: `<!-- Generated by @jsenv/file-size-impact -->`,
    createCommentForComparison: ({
      pullRequestBase,
      pullRequestHead,
      beforeMergeData,
      afterMergeData,
    }) => {
      return formatComment({
        pullRequestBase,
        pullRequestHead,

        trackingConfig,
        transformations,
        beforeMergeSnapshot: beforeMergeData,
        afterMergeSnapshot: afterMergeData,

        filesOrdering,
        maxRowsPerTable,
        fileRelativeUrlMaxLength,
        formatGroupSummary,
        formatHiddenImpactSummary,
        formatFileRelativeUrl,
        formatFileCell,
        formatFileSizeImpactCell,
        formatGroupSizeImpactCell,
        shouldOpenGroupByDefault,
      })
    },
    generatedByLink: {
      url: "https://github.com/jsenv/file-size-impact",
      text: "@jsenv/file-size-impact",
    },
    catchError,
  })
}
